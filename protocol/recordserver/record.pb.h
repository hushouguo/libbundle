// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recordserver/record.proto

#ifndef PROTOBUF_recordserver_2frecord_2eproto__INCLUDED
#define PROTOBUF_recordserver_2frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/entity.pb.h"
// @@protoc_insertion_point(includes)
namespace bundle {
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Entity_ValuesEntry;
class Entity_ValuesEntryDefaultTypeInternal;
extern Entity_ValuesEntryDefaultTypeInternal _Entity_ValuesEntry_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace bundle
namespace record {
class EntityCreateRequest;
class EntityCreateRequestDefaultTypeInternal;
extern EntityCreateRequestDefaultTypeInternal _EntityCreateRequest_default_instance_;
class EntityCreateResponse;
class EntityCreateResponseDefaultTypeInternal;
extern EntityCreateResponseDefaultTypeInternal _EntityCreateResponse_default_instance_;
class EntityDeleteRequest;
class EntityDeleteRequestDefaultTypeInternal;
extern EntityDeleteRequestDefaultTypeInternal _EntityDeleteRequest_default_instance_;
class EntityDeleteResponse;
class EntityDeleteResponseDefaultTypeInternal;
extern EntityDeleteResponseDefaultTypeInternal _EntityDeleteResponse_default_instance_;
class EntityRetrieveRequest;
class EntityRetrieveRequestDefaultTypeInternal;
extern EntityRetrieveRequestDefaultTypeInternal _EntityRetrieveRequest_default_instance_;
class EntityRetrieveResponse;
class EntityRetrieveResponseDefaultTypeInternal;
extern EntityRetrieveResponseDefaultTypeInternal _EntityRetrieveResponse_default_instance_;
class EntitySelectRequest;
class EntitySelectRequestDefaultTypeInternal;
extern EntitySelectRequestDefaultTypeInternal _EntitySelectRequest_default_instance_;
class EntitySelectResponse;
class EntitySelectResponseDefaultTypeInternal;
extern EntitySelectResponseDefaultTypeInternal _EntitySelectResponse_default_instance_;
class EntityUpdateRequest;
class EntityUpdateRequestDefaultTypeInternal;
extern EntityUpdateRequestDefaultTypeInternal _EntityUpdateRequest_default_instance_;
class EntityUpdateResponse;
class EntityUpdateResponseDefaultTypeInternal;
extern EntityUpdateResponseDefaultTypeInternal _EntityUpdateResponse_default_instance_;
}  // namespace record

namespace record {

namespace protobuf_recordserver_2frecord_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_recordserver_2frecord_2eproto

// ===================================================================

class EntityCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityCreateRequest) */ {
 public:
  EntityCreateRequest();
  virtual ~EntityCreateRequest();

  EntityCreateRequest(const EntityCreateRequest& from);

  inline EntityCreateRequest& operator=(const EntityCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityCreateRequest& default_instance();

  static inline const EntityCreateRequest* internal_default_instance() {
    return reinterpret_cast<const EntityCreateRequest*>(
               &_EntityCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EntityCreateRequest* other);

  // implements Message ----------------------------------------------

  inline EntityCreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityCreateRequest& from);
  void MergeFrom(const EntityCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .bundle.Entity entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  const ::bundle::Entity& entity() const;
  ::bundle::Entity* mutable_entity();
  ::bundle::Entity* release_entity();
  void set_allocated_entity(::bundle::Entity* entity);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::bundle::Entity* entity_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityCreateResponse) */ {
 public:
  EntityCreateResponse();
  virtual ~EntityCreateResponse();

  EntityCreateResponse(const EntityCreateResponse& from);

  inline EntityCreateResponse& operator=(const EntityCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityCreateResponse& default_instance();

  static inline const EntityCreateResponse* internal_default_instance() {
    return reinterpret_cast<const EntityCreateResponse*>(
               &_EntityCreateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EntityCreateResponse* other);

  // implements Message ----------------------------------------------

  inline EntityCreateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityCreateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityCreateResponse& from);
  void MergeFrom(const EntityCreateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint64 entityid = 3;
  void clear_entityid();
  static const int kEntityidFieldNumber = 3;
  ::google::protobuf::uint64 entityid() const;
  void set_entityid(::google::protobuf::uint64 value);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityRetrieveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityRetrieveRequest) */ {
 public:
  EntityRetrieveRequest();
  virtual ~EntityRetrieveRequest();

  EntityRetrieveRequest(const EntityRetrieveRequest& from);

  inline EntityRetrieveRequest& operator=(const EntityRetrieveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityRetrieveRequest& default_instance();

  static inline const EntityRetrieveRequest* internal_default_instance() {
    return reinterpret_cast<const EntityRetrieveRequest*>(
               &_EntityRetrieveRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EntityRetrieveRequest* other);

  // implements Message ----------------------------------------------

  inline EntityRetrieveRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityRetrieveRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityRetrieveRequest& from);
  void MergeFrom(const EntityRetrieveRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityRetrieveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint64 entityid = 3;
  void clear_entityid();
  static const int kEntityidFieldNumber = 3;
  ::google::protobuf::uint64 entityid() const;
  void set_entityid(::google::protobuf::uint64 value);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityRetrieveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityRetrieveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityRetrieveResponse) */ {
 public:
  EntityRetrieveResponse();
  virtual ~EntityRetrieveResponse();

  EntityRetrieveResponse(const EntityRetrieveResponse& from);

  inline EntityRetrieveResponse& operator=(const EntityRetrieveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityRetrieveResponse& default_instance();

  static inline const EntityRetrieveResponse* internal_default_instance() {
    return reinterpret_cast<const EntityRetrieveResponse*>(
               &_EntityRetrieveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EntityRetrieveResponse* other);

  // implements Message ----------------------------------------------

  inline EntityRetrieveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityRetrieveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityRetrieveResponse& from);
  void MergeFrom(const EntityRetrieveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityRetrieveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .bundle.Entity entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  const ::bundle::Entity& entity() const;
  ::bundle::Entity* mutable_entity();
  ::bundle::Entity* release_entity();
  void set_allocated_entity(::bundle::Entity* entity);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityRetrieveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::bundle::Entity* entity_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityUpdateRequest) */ {
 public:
  EntityUpdateRequest();
  virtual ~EntityUpdateRequest();

  EntityUpdateRequest(const EntityUpdateRequest& from);

  inline EntityUpdateRequest& operator=(const EntityUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityUpdateRequest& default_instance();

  static inline const EntityUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const EntityUpdateRequest*>(
               &_EntityUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(EntityUpdateRequest* other);

  // implements Message ----------------------------------------------

  inline EntityUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityUpdateRequest& from);
  void MergeFrom(const EntityUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .bundle.Entity entity = 3;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 3;
  const ::bundle::Entity& entity() const;
  ::bundle::Entity* mutable_entity();
  ::bundle::Entity* release_entity();
  void set_allocated_entity(::bundle::Entity* entity);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::bundle::Entity* entity_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityUpdateResponse) */ {
 public:
  EntityUpdateResponse();
  virtual ~EntityUpdateResponse();

  EntityUpdateResponse(const EntityUpdateResponse& from);

  inline EntityUpdateResponse& operator=(const EntityUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityUpdateResponse& default_instance();

  static inline const EntityUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const EntityUpdateResponse*>(
               &_EntityUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(EntityUpdateResponse* other);

  // implements Message ----------------------------------------------

  inline EntityUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityUpdateResponse& from);
  void MergeFrom(const EntityUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:record.EntityUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint32 shard_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityDeleteRequest) */ {
 public:
  EntityDeleteRequest();
  virtual ~EntityDeleteRequest();

  EntityDeleteRequest(const EntityDeleteRequest& from);

  inline EntityDeleteRequest& operator=(const EntityDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityDeleteRequest& default_instance();

  static inline const EntityDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const EntityDeleteRequest*>(
               &_EntityDeleteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EntityDeleteRequest* other);

  // implements Message ----------------------------------------------

  inline EntityDeleteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityDeleteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityDeleteRequest& from);
  void MergeFrom(const EntityDeleteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint64 entityid = 3;
  void clear_entityid();
  static const int kEntityidFieldNumber = 3;
  ::google::protobuf::uint64 entityid() const;
  void set_entityid(::google::protobuf::uint64 value);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntityDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityDeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntityDeleteResponse) */ {
 public:
  EntityDeleteResponse();
  virtual ~EntityDeleteResponse();

  EntityDeleteResponse(const EntityDeleteResponse& from);

  inline EntityDeleteResponse& operator=(const EntityDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityDeleteResponse& default_instance();

  static inline const EntityDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const EntityDeleteResponse*>(
               &_EntityDeleteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(EntityDeleteResponse* other);

  // implements Message ----------------------------------------------

  inline EntityDeleteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityDeleteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityDeleteResponse& from);
  void MergeFrom(const EntityDeleteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:record.EntityDeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::uint32 shard_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntitySelectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntitySelectRequest) */ {
 public:
  EntitySelectRequest();
  virtual ~EntitySelectRequest();

  EntitySelectRequest(const EntitySelectRequest& from);

  inline EntitySelectRequest& operator=(const EntitySelectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySelectRequest& default_instance();

  static inline const EntitySelectRequest* internal_default_instance() {
    return reinterpret_cast<const EntitySelectRequest*>(
               &_EntitySelectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(EntitySelectRequest* other);

  // implements Message ----------------------------------------------

  inline EntitySelectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EntitySelectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntitySelectRequest& from);
  void MergeFrom(const EntitySelectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntitySelectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // string where = 3;
  void clear_where();
  static const int kWhereFieldNumber = 3;
  const ::std::string& where() const;
  void set_where(const ::std::string& value);
  #if LANG_CXX11
  void set_where(::std::string&& value);
  #endif
  void set_where(const char* value);
  void set_where(const char* value, size_t size);
  ::std::string* mutable_where();
  ::std::string* release_where();
  void set_allocated_where(::std::string* where);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntitySelectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr where_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntitySelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.EntitySelectResponse) */ {
 public:
  EntitySelectResponse();
  virtual ~EntitySelectResponse();

  EntitySelectResponse(const EntitySelectResponse& from);

  inline EntitySelectResponse& operator=(const EntitySelectResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySelectResponse& default_instance();

  static inline const EntitySelectResponse* internal_default_instance() {
    return reinterpret_cast<const EntitySelectResponse*>(
               &_EntitySelectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(EntitySelectResponse* other);

  // implements Message ----------------------------------------------

  inline EntitySelectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EntitySelectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntitySelectResponse& from);
  void MergeFrom(const EntitySelectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntitySelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table = 2;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // .bundle.Entity entities = 3;
  bool has_entities() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 3;
  const ::bundle::Entity& entities() const;
  ::bundle::Entity* mutable_entities();
  ::bundle::Entity* release_entities();
  void set_allocated_entities(::bundle::Entity* entities);

  // uint32 shard = 1;
  void clear_shard();
  static const int kShardFieldNumber = 1;
  ::google::protobuf::uint32 shard() const;
  void set_shard(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:record.EntitySelectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::bundle::Entity* entities_;
  ::google::protobuf::uint32 shard_;
  mutable int _cached_size_;
  friend struct protobuf_recordserver_2frecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityCreateRequest

// uint32 shard = 1;
inline void EntityCreateRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityCreateRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateRequest.shard)
  return shard_;
}
inline void EntityCreateRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityCreateRequest.shard)
}

// string table = 2;
inline void EntityCreateRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityCreateRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateRequest.table)
  return table_.GetNoArena();
}
inline void EntityCreateRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityCreateRequest.table)
}
#if LANG_CXX11
inline void EntityCreateRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityCreateRequest.table)
}
#endif
inline void EntityCreateRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityCreateRequest.table)
}
inline void EntityCreateRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityCreateRequest.table)
}
inline ::std::string* EntityCreateRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityCreateRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityCreateRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityCreateRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityCreateRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityCreateRequest.table)
}

// .bundle.Entity entity = 3;
inline bool EntityCreateRequest::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityCreateRequest::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::bundle::Entity& EntityCreateRequest::entity() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateRequest.entity)
  return entity_ != NULL ? *entity_
                         : *::bundle::Entity::internal_default_instance();
}
inline ::bundle::Entity* EntityCreateRequest::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::bundle::Entity;
  }
  // @@protoc_insertion_point(field_mutable:record.EntityCreateRequest.entity)
  return entity_;
}
inline ::bundle::Entity* EntityCreateRequest::release_entity() {
  // @@protoc_insertion_point(field_release:record.EntityCreateRequest.entity)
  
  ::bundle::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void EntityCreateRequest::set_allocated_entity(::bundle::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:record.EntityCreateRequest.entity)
}

// -------------------------------------------------------------------

// EntityCreateResponse

// uint32 shard = 1;
inline void EntityCreateResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityCreateResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateResponse.shard)
  return shard_;
}
inline void EntityCreateResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityCreateResponse.shard)
}

// string table = 2;
inline void EntityCreateResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityCreateResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateResponse.table)
  return table_.GetNoArena();
}
inline void EntityCreateResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityCreateResponse.table)
}
#if LANG_CXX11
inline void EntityCreateResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityCreateResponse.table)
}
#endif
inline void EntityCreateResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityCreateResponse.table)
}
inline void EntityCreateResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityCreateResponse.table)
}
inline ::std::string* EntityCreateResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityCreateResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityCreateResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityCreateResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityCreateResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityCreateResponse.table)
}

// uint64 entityid = 3;
inline void EntityCreateResponse::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EntityCreateResponse::entityid() const {
  // @@protoc_insertion_point(field_get:record.EntityCreateResponse.entityid)
  return entityid_;
}
inline void EntityCreateResponse::set_entityid(::google::protobuf::uint64 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:record.EntityCreateResponse.entityid)
}

// -------------------------------------------------------------------

// EntityRetrieveRequest

// uint32 shard = 1;
inline void EntityRetrieveRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityRetrieveRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveRequest.shard)
  return shard_;
}
inline void EntityRetrieveRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityRetrieveRequest.shard)
}

// string table = 2;
inline void EntityRetrieveRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityRetrieveRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveRequest.table)
  return table_.GetNoArena();
}
inline void EntityRetrieveRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityRetrieveRequest.table)
}
#if LANG_CXX11
inline void EntityRetrieveRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityRetrieveRequest.table)
}
#endif
inline void EntityRetrieveRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityRetrieveRequest.table)
}
inline void EntityRetrieveRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityRetrieveRequest.table)
}
inline ::std::string* EntityRetrieveRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityRetrieveRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityRetrieveRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityRetrieveRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityRetrieveRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityRetrieveRequest.table)
}

// uint64 entityid = 3;
inline void EntityRetrieveRequest::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EntityRetrieveRequest::entityid() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveRequest.entityid)
  return entityid_;
}
inline void EntityRetrieveRequest::set_entityid(::google::protobuf::uint64 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:record.EntityRetrieveRequest.entityid)
}

// -------------------------------------------------------------------

// EntityRetrieveResponse

// uint32 shard = 1;
inline void EntityRetrieveResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityRetrieveResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveResponse.shard)
  return shard_;
}
inline void EntityRetrieveResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityRetrieveResponse.shard)
}

// string table = 2;
inline void EntityRetrieveResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityRetrieveResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveResponse.table)
  return table_.GetNoArena();
}
inline void EntityRetrieveResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityRetrieveResponse.table)
}
#if LANG_CXX11
inline void EntityRetrieveResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityRetrieveResponse.table)
}
#endif
inline void EntityRetrieveResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityRetrieveResponse.table)
}
inline void EntityRetrieveResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityRetrieveResponse.table)
}
inline ::std::string* EntityRetrieveResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityRetrieveResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityRetrieveResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityRetrieveResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityRetrieveResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityRetrieveResponse.table)
}

// .bundle.Entity entity = 3;
inline bool EntityRetrieveResponse::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityRetrieveResponse::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::bundle::Entity& EntityRetrieveResponse::entity() const {
  // @@protoc_insertion_point(field_get:record.EntityRetrieveResponse.entity)
  return entity_ != NULL ? *entity_
                         : *::bundle::Entity::internal_default_instance();
}
inline ::bundle::Entity* EntityRetrieveResponse::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::bundle::Entity;
  }
  // @@protoc_insertion_point(field_mutable:record.EntityRetrieveResponse.entity)
  return entity_;
}
inline ::bundle::Entity* EntityRetrieveResponse::release_entity() {
  // @@protoc_insertion_point(field_release:record.EntityRetrieveResponse.entity)
  
  ::bundle::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void EntityRetrieveResponse::set_allocated_entity(::bundle::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:record.EntityRetrieveResponse.entity)
}

// -------------------------------------------------------------------

// EntityUpdateRequest

// uint32 shard = 1;
inline void EntityUpdateRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityUpdateRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateRequest.shard)
  return shard_;
}
inline void EntityUpdateRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityUpdateRequest.shard)
}

// string table = 2;
inline void EntityUpdateRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityUpdateRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateRequest.table)
  return table_.GetNoArena();
}
inline void EntityUpdateRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityUpdateRequest.table)
}
#if LANG_CXX11
inline void EntityUpdateRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityUpdateRequest.table)
}
#endif
inline void EntityUpdateRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityUpdateRequest.table)
}
inline void EntityUpdateRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityUpdateRequest.table)
}
inline ::std::string* EntityUpdateRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityUpdateRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityUpdateRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityUpdateRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityUpdateRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityUpdateRequest.table)
}

// .bundle.Entity entity = 3;
inline bool EntityUpdateRequest::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline void EntityUpdateRequest::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
inline const ::bundle::Entity& EntityUpdateRequest::entity() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateRequest.entity)
  return entity_ != NULL ? *entity_
                         : *::bundle::Entity::internal_default_instance();
}
inline ::bundle::Entity* EntityUpdateRequest::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::bundle::Entity;
  }
  // @@protoc_insertion_point(field_mutable:record.EntityUpdateRequest.entity)
  return entity_;
}
inline ::bundle::Entity* EntityUpdateRequest::release_entity() {
  // @@protoc_insertion_point(field_release:record.EntityUpdateRequest.entity)
  
  ::bundle::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline void EntityUpdateRequest::set_allocated_entity(::bundle::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:record.EntityUpdateRequest.entity)
}

// -------------------------------------------------------------------

// EntityUpdateResponse

// uint32 shard = 1;
inline void EntityUpdateResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityUpdateResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateResponse.shard)
  return shard_;
}
inline void EntityUpdateResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityUpdateResponse.shard)
}

// string table = 2;
inline void EntityUpdateResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityUpdateResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateResponse.table)
  return table_.GetNoArena();
}
inline void EntityUpdateResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityUpdateResponse.table)
}
#if LANG_CXX11
inline void EntityUpdateResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityUpdateResponse.table)
}
#endif
inline void EntityUpdateResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityUpdateResponse.table)
}
inline void EntityUpdateResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityUpdateResponse.table)
}
inline ::std::string* EntityUpdateResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityUpdateResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityUpdateResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityUpdateResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityUpdateResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityUpdateResponse.table)
}

// bool result = 3;
inline void EntityUpdateResponse::clear_result() {
  result_ = false;
}
inline bool EntityUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:record.EntityUpdateResponse.result)
  return result_;
}
inline void EntityUpdateResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:record.EntityUpdateResponse.result)
}

// -------------------------------------------------------------------

// EntityDeleteRequest

// uint32 shard = 1;
inline void EntityDeleteRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityDeleteRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteRequest.shard)
  return shard_;
}
inline void EntityDeleteRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteRequest.shard)
}

// string table = 2;
inline void EntityDeleteRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityDeleteRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteRequest.table)
  return table_.GetNoArena();
}
inline void EntityDeleteRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityDeleteRequest.table)
}
#if LANG_CXX11
inline void EntityDeleteRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityDeleteRequest.table)
}
#endif
inline void EntityDeleteRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityDeleteRequest.table)
}
inline void EntityDeleteRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityDeleteRequest.table)
}
inline ::std::string* EntityDeleteRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityDeleteRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityDeleteRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityDeleteRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityDeleteRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityDeleteRequest.table)
}

// uint64 entityid = 3;
inline void EntityDeleteRequest::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EntityDeleteRequest::entityid() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteRequest.entityid)
  return entityid_;
}
inline void EntityDeleteRequest::set_entityid(::google::protobuf::uint64 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteRequest.entityid)
}

// -------------------------------------------------------------------

// EntityDeleteResponse

// uint32 shard = 1;
inline void EntityDeleteResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntityDeleteResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteResponse.shard)
  return shard_;
}
inline void EntityDeleteResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteResponse.shard)
}

// string table = 2;
inline void EntityDeleteResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityDeleteResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteResponse.table)
  return table_.GetNoArena();
}
inline void EntityDeleteResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntityDeleteResponse.table)
}
#if LANG_CXX11
inline void EntityDeleteResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntityDeleteResponse.table)
}
#endif
inline void EntityDeleteResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntityDeleteResponse.table)
}
inline void EntityDeleteResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntityDeleteResponse.table)
}
inline ::std::string* EntityDeleteResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntityDeleteResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityDeleteResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntityDeleteResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityDeleteResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntityDeleteResponse.table)
}

// bool result = 3;
inline void EntityDeleteResponse::clear_result() {
  result_ = false;
}
inline bool EntityDeleteResponse::result() const {
  // @@protoc_insertion_point(field_get:record.EntityDeleteResponse.result)
  return result_;
}
inline void EntityDeleteResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:record.EntityDeleteResponse.result)
}

// -------------------------------------------------------------------

// EntitySelectRequest

// uint32 shard = 1;
inline void EntitySelectRequest::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntitySelectRequest::shard() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectRequest.shard)
  return shard_;
}
inline void EntitySelectRequest::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntitySelectRequest.shard)
}

// string table = 2;
inline void EntitySelectRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySelectRequest::table() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectRequest.table)
  return table_.GetNoArena();
}
inline void EntitySelectRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntitySelectRequest.table)
}
#if LANG_CXX11
inline void EntitySelectRequest::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntitySelectRequest.table)
}
#endif
inline void EntitySelectRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntitySelectRequest.table)
}
inline void EntitySelectRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntitySelectRequest.table)
}
inline ::std::string* EntitySelectRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntitySelectRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySelectRequest::release_table() {
  // @@protoc_insertion_point(field_release:record.EntitySelectRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySelectRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectRequest.table)
}

// string where = 3;
inline void EntitySelectRequest::clear_where() {
  where_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySelectRequest::where() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectRequest.where)
  return where_.GetNoArena();
}
inline void EntitySelectRequest::set_where(const ::std::string& value) {
  
  where_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntitySelectRequest.where)
}
#if LANG_CXX11
inline void EntitySelectRequest::set_where(::std::string&& value) {
  
  where_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntitySelectRequest.where)
}
#endif
inline void EntitySelectRequest::set_where(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  where_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntitySelectRequest.where)
}
inline void EntitySelectRequest::set_where(const char* value, size_t size) {
  
  where_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntitySelectRequest.where)
}
inline ::std::string* EntitySelectRequest::mutable_where() {
  
  // @@protoc_insertion_point(field_mutable:record.EntitySelectRequest.where)
  return where_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySelectRequest::release_where() {
  // @@protoc_insertion_point(field_release:record.EntitySelectRequest.where)
  
  return where_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySelectRequest::set_allocated_where(::std::string* where) {
  if (where != NULL) {
    
  } else {
    
  }
  where_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where);
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectRequest.where)
}

// -------------------------------------------------------------------

// EntitySelectResponse

// uint32 shard = 1;
inline void EntitySelectResponse::clear_shard() {
  shard_ = 0u;
}
inline ::google::protobuf::uint32 EntitySelectResponse::shard() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectResponse.shard)
  return shard_;
}
inline void EntitySelectResponse::set_shard(::google::protobuf::uint32 value) {
  
  shard_ = value;
  // @@protoc_insertion_point(field_set:record.EntitySelectResponse.shard)
}

// string table = 2;
inline void EntitySelectResponse::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySelectResponse::table() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectResponse.table)
  return table_.GetNoArena();
}
inline void EntitySelectResponse::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.EntitySelectResponse.table)
}
#if LANG_CXX11
inline void EntitySelectResponse::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.EntitySelectResponse.table)
}
#endif
inline void EntitySelectResponse::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.EntitySelectResponse.table)
}
inline void EntitySelectResponse::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.EntitySelectResponse.table)
}
inline ::std::string* EntitySelectResponse::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:record.EntitySelectResponse.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySelectResponse::release_table() {
  // @@protoc_insertion_point(field_release:record.EntitySelectResponse.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySelectResponse::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectResponse.table)
}

// .bundle.Entity entities = 3;
inline bool EntitySelectResponse::has_entities() const {
  return this != internal_default_instance() && entities_ != NULL;
}
inline void EntitySelectResponse::clear_entities() {
  if (GetArenaNoVirtual() == NULL && entities_ != NULL) delete entities_;
  entities_ = NULL;
}
inline const ::bundle::Entity& EntitySelectResponse::entities() const {
  // @@protoc_insertion_point(field_get:record.EntitySelectResponse.entities)
  return entities_ != NULL ? *entities_
                         : *::bundle::Entity::internal_default_instance();
}
inline ::bundle::Entity* EntitySelectResponse::mutable_entities() {
  
  if (entities_ == NULL) {
    entities_ = new ::bundle::Entity;
  }
  // @@protoc_insertion_point(field_mutable:record.EntitySelectResponse.entities)
  return entities_;
}
inline ::bundle::Entity* EntitySelectResponse::release_entities() {
  // @@protoc_insertion_point(field_release:record.EntitySelectResponse.entities)
  
  ::bundle::Entity* temp = entities_;
  entities_ = NULL;
  return temp;
}
inline void EntitySelectResponse::set_allocated_entities(::bundle::Entity* entities) {
  delete entities_;
  entities_ = entities;
  if (entities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:record.EntitySelectResponse.entities)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace record

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_recordserver_2frecord_2eproto__INCLUDED
